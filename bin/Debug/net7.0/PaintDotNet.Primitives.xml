<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PaintDotNet.Primitives</name>
    </assembly>
    <members>
        <member name="T:PaintDotNet.Imaging.LinearColors">
            <summary>
            Provides predefined colors in the scRGB color space, which uses linear (1.0) gamma.
            </summary>
        </member>
        <member name="M:PaintDotNet.Imaging.PixelFormatExtensions.GetPixelInfo(PaintDotNet.Imaging.PixelFormat@)">
            <summary>
            Gets information about the pixel format.
            </summary>
            <remarks>
            This will be a boxed instance of a color struct, e.g. ColorAlpha8 for PixelFormats.Alpha8.
            </remarks>
        </member>
        <member name="M:PaintDotNet.Imaging.PixelFormatExtensions.TryGetPixelInfo(PaintDotNet.Imaging.PixelFormat@)">
            <summary>
            Gets information about the pixel format.
            </summary>
            <remarks>
            This will be a boxed instance of a color struct, e.g. ColorAlpha8 for PixelFormats.Alpha8.
            </remarks>
        </member>
        <member name="F:PaintDotNet.Imaging.PixelFormatNumericRepresentation.Unspecified">
            <summary>
            <inheritdoc cref="F:TerraFX.Interop.Windows.WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationUnspecified"/>
            </summary>
        </member>
        <member name="F:PaintDotNet.Imaging.PixelFormatNumericRepresentation.Indexed">
            <summary>
            <inheritdoc cref="F:TerraFX.Interop.Windows.WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationIndexed"/>
            </summary>
        </member>
        <member name="F:PaintDotNet.Imaging.PixelFormatNumericRepresentation.UnsignedInteger">
            <summary>
            <inheritdoc cref="F:TerraFX.Interop.Windows.WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationUnsignedInteger"/>
            </summary>
        </member>
        <member name="F:PaintDotNet.Imaging.PixelFormatNumericRepresentation.SignedInteger">
            <summary>
            <inheritdoc cref="F:TerraFX.Interop.Windows.WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationSignedInteger"/>
            </summary>
        </member>
        <member name="F:PaintDotNet.Imaging.PixelFormatNumericRepresentation.Fixed">
            <summary>
            <inheritdoc cref="F:TerraFX.Interop.Windows.WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationFixed"/>
            </summary>
        </member>
        <member name="F:PaintDotNet.Imaging.PixelFormatNumericRepresentation.Float">
            <summary>
            <inheritdoc cref="F:TerraFX.Interop.Windows.WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationFloat"/>
            </summary>
        </member>
        <member name="T:PaintDotNet.Imaging.PixelFormats">
            <summary>
            Contains properties for getting the documented, built-in pixel formats, as well as methods
            for obtaining information about the supported pixel formats.
            </summary>
            <remarks>
            For more information, see: <a href="http://msdn.microsoft.com/en-us/library/ee719797.aspx">Native Pixel Formats Overview</a>.
            </remarks>
        </member>
        <member name="M:PaintDotNet.Imaging.PixelFormats.GetSupportedFormatsList">
            <summary>
            Gets a list of the <see cref="T:PaintDotNet.Imaging.PixelFormat"/>s that have full support in the imaging framework.
            These pixel formats will have a corresponding color struct, such as <see cref="T:PaintDotNet.Imaging.ColorBgra32"/>,
            as well as support for <c>IBitmapSource</c>, <c>IBitmap</c>, and <c>IBitmapLock</c>.
            </summary>
        </member>
        <member name="M:PaintDotNet.Imaging.PixelFormats.GetSupportedFormatsSet">
            <summary>
            Gets a set of the <see cref="T:PaintDotNet.Imaging.PixelFormat"/>s that have full support in the imaging framework.
            These pixel formats will have a corresponding color struct, such as <see cref="T:PaintDotNet.Imaging.ColorBgra32"/>,
            as well as support for <c>IBitmapSource</c>, <c>IBitmap</c>, and <c>IBitmapLock</c>.
            </summary>
        </member>
        <member name="M:PaintDotNet.Imaging.PixelFormats.TryGetPixelInfo(PaintDotNet.Imaging.PixelFormat@)">
            <summary>
            Gets information about the pixel format.
            </summary>
            <remarks>
            This will be a boxed instance of a color struct, e.g. ColorAlpha8 for PixelFormats.Alpha8.
            </remarks>
        </member>
        <member name="T:PaintDotNet.Imaging.SrgbColors">
            <summary>
            Provides predefined colors in the sRGB color space, which uses approximately 2.2 gamma.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.Matrix3x2Double.IsRectilinear">
            <summary>
            Gets a flag indicating whether this matrix consists of only translation and scaling.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.Matrix3x2Float.IsRectilinear">
            <summary>
            Gets a flag indicating whether this matrix consists of only translation and scaling.
            </summary>
        </member>
        <member name="M:PaintDotNet.Rendering.PixelKernels.ClearTransparentColors(PaintDotNet.RegionPtr{PaintDotNet.Imaging.ColorBgra32})">
            <summary>
            For pixels whose alpha value is zero, sets the color channels to zero as well.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.RectDouble.Empty">
            <summary>
            Gets a special value that represents a rectangle with no position or area.
            </summary>
            <returns>
            The empty rectangle, which has <see cref="P:PaintDotNet.Rendering.RectDouble.X" /> and <see cref="P:PaintDotNet.Rendering.RectDouble.Y" /> property values of
            <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:PaintDotNet.Rendering.RectDouble.Width" /> and <see cref="P:PaintDotNet.Rendering.RectDouble.Height" />
            property values of <see cref="F:System.Double.NegativeInfinity" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.RectDouble.IsEmpty">
            <summary>
            Indicates whether the rectangle is the <see cref="P:PaintDotNet.Rendering.RectDouble.Empty"/> rectangle or equivalent
            (negative width or negative height). Use <see cref="P:PaintDotNet.Rendering.RectDouble.HasArea"/> to test whether the
            rectangle is non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.RectFloat.Empty">
            <summary>
            Gets a special value that represents a rectangle with no position or area.
            </summary>
            <returns>
            The empty rectangle, which has <see cref="P:PaintDotNet.Rendering.RectFloat.X" /> and <see cref="P:PaintDotNet.Rendering.RectFloat.Y" /> property values of
            <see cref="F:System.Float.PositiveInfinity" />, and has <see cref="P:PaintDotNet.Rendering.RectFloat.Width" /> and <see cref="P:PaintDotNet.Rendering.RectFloat.Height" />
            property values of <see cref="F:System.Float.NegativeInfinity" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.RectFloat.IsEmpty">
            <summary>
            Indicates whether the rectangle is the <see cref="P:PaintDotNet.Rendering.RectFloat.Empty"/> rectangle or equivalent
            (negative width or negative height). Use <see cref="P:PaintDotNet.Rendering.RectFloat.HasArea"/> to test whether the
            rectangle is non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.RectInt32.Empty">
            <summary>
            Gets a special value that represents a rectangle with no position or area.
            </summary>
            <returns>
            The empty rectangle, which has <see cref="P:PaintDotNet.Rendering.RectInt32.X" /> and <see cref="P:PaintDotNet.Rendering.RectInt32.Y" /> property values of
            <see cref="F:System.Int32.MaxValue" />, and has <see cref="P:PaintDotNet.Rendering.RectInt32.Width" /> and <see cref="P:PaintDotNet.Rendering.RectInt32.Height" />
            property values of <see cref="F:System.Int32.MinValue" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.RectInt32.IsEmpty">
            <summary>
            Indicates whether the rectangle is the <see cref="P:PaintDotNet.Rendering.RectInt32.Empty"/> rectangle or equivalent
            (negative width or negative height). Use <see cref="P:PaintDotNet.Rendering.RectInt32.HasArea"/> to test whether the
            rectangle is non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.RectInt64.Empty">
            <summary>
            Gets a special value that represents a rectangle with no position or area.
            </summary>
            <returns>
            The empty rectangle, which has <see cref="P:PaintDotNet.Rendering.RectInt64.X" /> and <see cref="P:PaintDotNet.Rendering.RectInt64.Y" /> property values of
            <see cref="F:System.Int64.MaxValue" />, and has <see cref="P:PaintDotNet.Rendering.RectInt64.Width" /> and <see cref="P:PaintDotNet.Rendering.RectInt64.Height" />
            property values of <see cref="F:System.Int64.MinValue" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.RectInt64.IsEmpty">
            <summary>
            Indicates whether the rectangle is the <see cref="P:PaintDotNet.Rendering.RectInt64.Empty"/> rectangle or equivalent
            (negative width or negative height). Use <see cref="P:PaintDotNet.Rendering.RectInt64.HasArea"/> to test whether the
            rectangle is non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeDouble.Empty">
            <summary>
            Gets a special value that represents a size with no area. Note that his is not the same as a size
            value with zero area. See <see cref="P:PaintDotNet.Rendering.SizeDouble.IsEmpty"/> and <see cref="P:PaintDotNet.Rendering.SizeDouble.HasArea"/> for more details.
            </summary>
            <returns>
            The empty rectangle, which has <see cref="P:PaintDotNet.Rendering.SizeDouble.Width" /> and <see cref="P:PaintDotNet.Rendering.SizeDouble.Height" /> property values
            of <see cref="F:System.Double.NegativeInfinity" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeDouble.IsEmpty">
            <summary>
            Indicates whether the size is the <see cref="P:PaintDotNet.Rendering.SizeDouble.Empty"/> size or equivalent (negative
            width or negative height). Use <see cref="P:PaintDotNet.Rendering.SizeDouble.HasArea"/> to test whether the size is
            non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeFloat.Empty">
            <summary>
            Gets a special value that represents a size with no area. Note that his is not the same as a size
            value with zero area. See <see cref="P:PaintDotNet.Rendering.SizeFloat.IsEmpty"/> and <see cref="P:PaintDotNet.Rendering.SizeFloat.HasArea"/> for more details.
            </summary>
            <returns>
            The empty rectangle, which has <see cref="P:PaintDotNet.Rendering.SizeFloat.Width" /> and <see cref="P:PaintDotNet.Rendering.SizeFloat.Height" /> property values
            of <see cref="F:System.Float.NegativeInfinity" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeFloat.IsEmpty">
            <summary>
            Indicates whether the size is the <see cref="P:PaintDotNet.Rendering.SizeFloat.Empty"/> size or equivalent (negative
            width or negative height). Use <see cref="P:PaintDotNet.Rendering.SizeFloat.HasArea"/> to test whether the size is
            non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeInt32.Empty">
            <summary>
            Gets a special value that represents a size with no area. Note that his is not the same as a size
            value with zero area. See <see cref="P:PaintDotNet.Rendering.SizeInt32.IsEmpty"/> and <see cref="P:PaintDotNet.Rendering.SizeInt32.HasArea"/> for more details.
            </summary>
            <returns>
            The empty size, which has <see cref="P:PaintDotNet.Rendering.SizeInt32.Width" /> and <see cref="P:PaintDotNet.Rendering.SizeInt32.Height" /> property values
            of <see cref="F:System.Int32.MinValue" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeInt32.IsEmpty">
            <summary>
            Indicates whether the size is the <see cref="P:PaintDotNet.Rendering.SizeInt32.Empty"/> size or equivalent (negative
            width or negative height). Use <see cref="P:PaintDotNet.Rendering.SizeInt32.HasArea"/> to test whether the size is
            non-empty and has a non-zero area.
            </summary>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeInt64.Empty">
            <summary>
            Gets a special value that represents a size with no area. Note that his is not the same as a size
            value with zero area. See <see cref="P:PaintDotNet.Rendering.SizeInt64.IsEmpty"/> and <see cref="P:PaintDotNet.Rendering.SizeInt64.HasArea"/> for more details.
            </summary>
            <returns>
            The empty size, which has <see cref="P:PaintDotNet.Rendering.SizeInt64.Width" /> and <see cref="P:PaintDotNet.Rendering.SizeInt64.Height" /> property values
            of <see cref="F:System.Int64.MinValue" />.
            </returns>
        </member>
        <member name="P:PaintDotNet.Rendering.SizeInt64.IsEmpty">
            <summary>
            Indicates whether the size is the <see cref="P:PaintDotNet.Rendering.SizeInt64.Empty"/> size or equivalent (negative
            width or negative height). Use <see cref="P:PaintDotNet.Rendering.SizeInt64.HasArea"/> to test whether the size is
            non-empty and has a non-zero area.
            </summary>
        </member>
    </members>
</doc>
